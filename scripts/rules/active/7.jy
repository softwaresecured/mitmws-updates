from com.mitmws.anomalydetection import DetectedAnomaly
from com.mitmws.httpproxy.trafficlogger import WebsocketTrafficRecord
from java.util import ArrayList
from com.mitmws.anomalydetection import DetectionRuleSelfTestStatus

def getName():
    return "SQL Injection tests ( database error patterns )"

def getActiveRuleType():
    return "PAYLOAD"

def getCategory():
    return "SQL injection"
    
def getDescription():
    return "SQL Injection tests ( database error patterns )"

def getPayloads():
    return ["'",'%','"','1','A','(',')','99999999999999999999','-1','1.1','%','\n','\t']

def getFrameScope():
  return ["TEXT","PING","PONG"]

def getTestScope():
  return "APPLICATION"

def analyze( conversations ):
    anomalies = ArrayList()
    for conversation in conversations:
      for websocket_message in conversation:
              if websocket_message.getFrame().payloadMatchesRegex("(?i).*(mariadb|mysql).*at line \d+.*"):
                  anomaly = DetectedAnomaly(1007, "MED", "Regex match", "CWE-209", "Database error pattern found", "Generation of Error Message Containing Sensitive Information")
                  anomaly.setWebsocketMsgId(websocket_message.getFrame().getMessageUUID())
                  anomaly.setConversationUuid(websocket_message.getFrame().getConversationUUID())
                  anomalies.add(anomaly)
    return anomalies

def selfTest():
    result = DetectionRuleSelfTestStatus()
    result.setSelfTestOK(True)
    return result
