from com.wsproxy.util import ScriptUtil
from com.wsproxy.anomalydetection import DetectedAnomaly
from com.wsproxy.httpproxy.trafficlogger import WebsocketTrafficRecord
from com.wsproxy.tester import RawWebsocketFrame
from java.util import ArrayList

def getName():
    return "Websocket-Protocol: Fuzz header"
    
def getActiveRuleType():
    return "FUZZ-FRAME-HEADER"

def getDescription():
    return "Run zzuf on the frame header"

def getCategory():
    return "Fuzz"
    
def getFrameScope():
  return ["TEXT","PING","PONG","CLOSE","BINARY","CONTINUATION"]

def getTestScope():
  return "PRESENTATION-WS"

def getMutations( frame ):
  frames = []
  return frames;

def getPayloadMutationBySeed( payload, seed, ratio ):
    return payload
    
def getFrameMutationBySeed( payload, seed, ratio, payloadLength ):
    header = payload[:payloadLength*2]
    body = payload[(payloadLength*2)*-1:]
    output = ScriptUtil.runCommand(["sh","-c","echo -n {}| xxd -r -p | zzuf -s {} -r {} | xxd -p | tr -d '\n'".format(payload,str(seed),str(ratio))])
    fuzzed_frame = output + body
    return fuzzed_frame

def analyze( websocket_messages ):
    anomalies = ArrayList()
    for websocket_message in websocket_messages:
        # in this case, we just check for the presence of the string "debugtest" as a POC
        if websocket_message.getFrame().payloadMatchesRegex(".*Ratchet detected.*"):
            anomaly = DetectedAnomaly(1001, "INFO", "Regex match", "CWE 209", "Information Exposure Through an Error Message","An inbound websocket frame contained a message matching the pattern for a Ratchet websocket server error message.")
            anomaly.setWebsocketMsgId(websocket_message.getFrame().getMessageUUID())
            anomalies.add(anomaly)
    return anomalies
    
def getFuzzRange():
    return 1000

def getFuzzRatio():
    return 0.01

def selfTest():
    return True
