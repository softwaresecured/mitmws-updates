from com.mitmws.util import ScriptUtil
from com.mitmws.anomalydetection import DetectedAnomaly
from com.mitmws.httpproxy.trafficlogger import WebsocketTrafficRecord
from com.mitmws.tester import RawWebsocketFrame
from java.util import ArrayList
from com.mitmws.anomalydetection import DetectionRuleSelfTestStatus

def getName():
    return "Zzuf target"
    
def getActiveRuleType():
    return "FUZZ-PAYLOAD"

def getDescription():
    return "Runs zzuf on the target input"

def getCategory():
    return "Fuzz"
    
def getFrameScope():
  return ["TEXT","PING","PONG","CLOSE","BINARY","CONTINUATION"]

def getTestScope():
  return "APPLICATION"

def getPayloadMutationBySeed( payload, seed, ratio ):
    output = ScriptUtil.runCommand(["sh","-c","echo -n {}| xxd -r -p | zzuf -s {} -r {} | xxd -p | tr -d '\n'".format(payload,str(seed),str(ratio))])
    return output
  
def analyze( websocket_messages ):
    anomalies = ArrayList()
    return anomalies

def selfTest():
    result = DetectionRuleSelfTestStatus()
    result.setSelfTestOK(True)

    try:
        output = ScriptUtil.runCommand(["which", "sh"])
    except:
        result.setSelfTestOK(False)
        result.addSelfTestError("No shell available ( could not find \"sh\"")

    try:
        output = ScriptUtil.runCommand(["sh", "-c", "xxd -version 2>&1"])
        if not JythonScriptUtil.regexMatches("^xxd.*Juergen.*",output):
            result.setSelfTestOK(False)
            result.addSelfTestError("xxd version unsupported")
    except:
        result.setSelfTestOK(False)
        result.addSelfTestError("Could not find xxd")

    try:
        output = ScriptUtil.runCommand(["zzuf","--version"])
        if not JythonScriptUtil.regexMatches("^zzuf.*hocevar.*",output):
            result.setSelfTestOK(False)
            result.addSelfTestError("zzuf version not supported")
    except:
        result.setSelfTestOK(False)
        result.addSelfTestError("Could not find zzuf")
    return result